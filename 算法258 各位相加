# 给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。

示例:
输入: 38
输出: 2 
解释: 各位相加的过程为：3 + 8 = 11, 1 + 1 = 2。 由于 2 是一位数，所以返回 2。

# 进阶: 你可以不使用循环或者递归，且在 O(1) 时间复杂度内解决这个问题吗？

题解：


class Solution:
    def addDigits(self, num: int) -> int:
        if num>=9 and num%9==0:
            return 9
        elif num>=9 and num%9!=0:
            return num%9;
        else:
            return num 

个人代码：执行用时：48 ms
         内存消耗：13.7 MB
         
他人代码：内存消耗：12.5 MB
class Solution:
    def addDigits(self, num: int) -> int:
        num1=str(num)
        mid=(len(str(num*int("1"*(len(num1)+1))))-1)//2
        if len(str(num))==1:
            return num
        else:
            return str(num*int("1"*(len(num1)+1)))[mid]  
            
 他人代码：执行用时：24 ms           
 class Solution:
    def addDigits(self, num: int) -> int:
        if not num:
            return 0
        return num % 9 if num % 9 != 0 else 9
